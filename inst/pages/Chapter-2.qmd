# Writing a {`BiocBook`} package

## Register a Github account in R

::: {.callout-tip icon='true'}

Skip this section if your Github account is already 
registered. You can check this by typing: 

```{r}
#| eval: false
gh::gh_whoami()
```

:::

### Creating a new Github token

```{r}
#| eval: false
usethis::create_github_token(
    description = "BiocBook", 
    scopes = c("repo", "user:email", "workflow")
)
```

This command will open up a new web browser. On the displayed Github page: 

- Select an Expiration date;
- Make sure that at least `repo`, `user > user:email` and `workflow` scopes are selected;
- Click on "Generate token" at the bottom of the page;
- Copy your Github token displayed in the Github web page

### Register your new token in R

```{r}
#| eval: false
gitcreds::gitcreds_set()
```

Paste your new Github token here and press "Enter".

::: {.callout-tip icon='true'}

#### Saving your Github token for later use 

On Linux, `gitcreds` is generally not able to permanently store the provided 
Github token. For this reason, you may want to also add your Github token 
to `~/.Renviron` to be able to reuse it. You can edit the `~/.Renviron` by 
typing `usethis::edit_r_environ()`, and define the `GITHUB_PAT` environment variable: 

```{txt filename=".Renviron"}
GITHUB_PAT="<YOUR-TOKEN>"
```

:::

### Double check you are logged in

```{r}
#| eval: false
gh::gh_whoami()
```

## `BiocBook` workflow

### Initiate a {`BiocBook`} package

#### R

Creating a `BiocBook` in `R` is straightforward with the {`BiocBook`} package. 

```{r}
#| eval: false
if (!require(BiocBook)) BiocManager::install('js2264/BiocBook')
library(BiocBook)
biocbook <- init("myBook")
```

The steps performed under the hood by `init()` are detailed in the 
console. Briefly, the following steps are followed: 

1. Creating a Github repository in your account, using the `js2264/BiocBook.template` repository as a template
2. Clone the Github package locally
3. Fillout placeholders from the template
4. Committing and pushing the changes to Github

#### VS Code

::: {.callout-warning icon='true'}

##### This approach is significantly more hazardous. It is highly recommended to stick to the `init()` helper function from the {`BiocBook`} package. 

:::

##### Use the {`BiocBook.template`} package template {-}

This template is available from 
[`js2264/BiocBook.template`](https://github.com/js2264/BiocBook.template)

![](images/use_template.jpg)

##### Create a new repo {-}

![](images/new_repo.jpg){width="70%"}

##### Enable `Github Pages` to be deployed

You will need to enable the Github Pages service for your newly created repository. 

- Go to your new `Github` repository;
- Open the "Settings" tab;
- On the leftside bar, clik on the "Pages" tab;
- Select the `gh-pages` branch and the `/docs` folder to deploy your Github Pages.

![](images/gh_pages.jpg)

##### Enter VS Code editor by pressing `.` {-}

![](images/github_vscode.jpg)

##### Fillout placeholders {-}

::: {.callout-warning icon='true'}

Three types of placeholders need to be replaced: 

1. `<Package_name>`
2. `<package_name>`
3. `<github_user>`

Three different files contain these placeholders: 

1. `/inst/assets/_book.yml`
2. `/DESCRIPTION`
3. `/index.qmd`

:::

![](images/github_edit.jpg)

##### Commit changes {-}

![](images/github_commit.jpg)

##### Clone the package to a local computer {-}

### Edit new `BiocBook` chapters

- `add_chapter(biocbook, title)` is used to write new chapters; 
- `add_preamble(biocbook)` is used to add an unnumbered extra page after the Welcome 
page but before the chapters begin.

::: {.callout-warning icon='true'}

#### Don't forget to add any package used in the book pages to `Imports:` or `Suggests:` fields in `DESCRIPTION`. 

This ensures that these packages are installed in the Docker image prior to rendering. 

:::

### Edit assets

A BiocBook relies on several assets, located in `/inst/assets`.: 

- `_book.yml`, `_format.yml`, `_knitr.yml`, `_website.yml`
- `bibliography.bib`
- `book.scss`

To quickly edit these assets, use the corresponding `edit_*` functions: 

```{r}
#| eval: false
edit_yml(biocbook)
edit_bib(biocbook)
edit_css(biocbook)
```

### Previewing and publishing changes

#### Previewing 

While writing, you can monitor the rendering of your book live as follows: 

```{r}
#| eval: false
preview(biocbook)
```

This will serve a local live rendering of your book. 

#### Publishing 

Once you are done writing pages of your new book, you should always commit 
your changes and push them to Github. This can be done as follows: 

```{r}
#| eval: false
publish(biocbook, message = "ðŸš€ Publish")
```

#### Check your published book and Dockerfiles 

This connects to the Github repository associated with a local book and 
checks the existing branches and Dockerfiles. 

```{r}
#| eval: false
status(biocbook)
```

## Writing features 

### Executing code

It's super easy to execute actual code from any `BiocBook` page when rendering the `BiocBook` website. 

#### `R` code

`R` code can be executed and rendered: 

```{r filename="R"}
utils::packageVersion("BiocVersion")
```

#### `bash` code

`bash` code can also be executed and rendered: 

```{sh filename="bash"}
find ../ -name "*.qmd"
```

<!-- 
#### `python` code

Finally, `python` code can also be executed and rendered: 

```{python filename="python"}
#| eval: false
import os
os.getcwd()
```

For the rendering of `python` code, you will be limited to 
the `python` packages installed in the Github worker. These packages can be 
listed in the `inst/assets/requirements.txt` file, e.g.: 

```{txt filename="requirements.txt"}
#| eval: false
numpy
pandas >= 2.0.0
```
 -->

### Creating data object

While writing chapters, you can save objects as `.rds` files to reuse them 
in subsequent chapters (e.g. [here](biocbook-vs-rebook.html#rebook-features-missing-from-biocbook)).

```{r}
isthisworking <- "yes"
saveRDS(isthisworking, 'isthisworking.rds')
```

### Adding references

References can be listed as `.bib` entries in the bibliography file located in 
`inst/assets/bibliography.bib`. The references can be added in-line using the @ notation, 
e.g. by typing **\@serizay2023**, this will insert the following reference: **@serizay2023**. 
